# -*- coding: utf-8 -*-
"""redpill-dashboard-pieces.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mpqEFPiTueqNcQjyp0bP2DHM46T0m3M
"""

# Installing packages for initial run
#!pip install dash
#!pip install chart-studio

import dash
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, ClientsideFunction

import numpy as np
import pandas as pd
import datetime
from datetime import datetime as dt
import pathlib

import os

from google.colab import drive
from google.colab import files

#import chart_studio
#import chart_studio.plotly as py
import plotly.graph_objects as go
from plotly.subplots import make_subplots

app = dash.Dash(
    __name__,
    meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}],
)

server = app.server
app.config.suppress_callback_exceptions = True

#drive.mount('/content/drive')

data_path = "/Users/allisonwun-huikoh/Documents/GitHub/rsub-redpill-analysis/dash-app/data"

# read in data
df = pd.read_csv(os.path.join(data_path,"dash-input1.csv"))
hmdf_c = pd.read_csv(os.path.join(data_path,"hmdf_c1.csv"))
hmdf_s = pd.read_csv(os.path.join(data_path,"hmdf_s1.csv"))
con_df = pd.read_csv(os.path.join(data_path,"condf.csv"))

# subset and recombine data for static ts plots
df11 = df[df.attribute=='comms_num']
df12 = df11.drop_duplicates(['id2'])

df13 = df[df.attribute=='score']
df14 = df13.drop_duplicates(['id2'])

df1 = df12.append(df14)
df1 = df1.sort_values(by=["date"])

# inputs 1
subreddit_list = df.iloc[:, 7].unique().tolist() # TheRedPill MGOTW or MensRights
type_list = df.iloc[:, 5].unique().tolist() # hot top new controversial etc.
attribute_list = df.iloc[:, 3].unique().tolist() # score or number of comments in final dataset

df["month"] = df["date"].astype(str).str[5:7]
df["year"] = df["date"].astype(str).str[:4]
df["date"] = pd.to_datetime(df.date)
df = df.sort_values(by=["date"])

def description_card():
    """
    :return: A Div containing dashboard title & descriptions.
    """
    return html.Div(
        id="description-card",
        children=[
            html.H3("Welcome to the \"Men's Rights\" Activist Dashboard"),
            html.H6("Allison Koh & Samuel Wardwell"),
            html.Div(
                id="intro",
                children="When you think of mens rights activist discussions online, these words might come to mind:",
            ),

            html.Div(
                id="intro1",
                children=html.Img(src=app.get_asset_url('i_wordcloud.png')),
            ),
            html.Br(),
            html.Div(
                id="intro2",
                children="For this project, we aim to identify patterns in the top 100 \"hot\", \"controversial\" and \"top\" posts from the r/TheRedPill r/MGTOW and r/MensRights subreddit feeds.",
            ),
            html.Br(),
            html.Div(
                id="intro3",
                children="First, we illustrate activity on each Subreddit feed over time, measured by the number of comments on selected posts and the score (upvotes - downvotes).",
            ),
            html.Br(),
            html.Div(
                id="intro4",
                children="We also investigate trends in when the most \"controversial\" posts took place by month. On Reddit, controversial posts refer to posts that spark the most discussion.",
            ),
            html.Br(),
            html.Div(
                id="intro5",
                children="Finally, we present an overview of what users are talking about based off of a 5-topic LDA model that was run using the gensim library. We assigned labels based on assessing keywords in context for posts in each category.",
            ),
            html.Br(),
            html.Div(
                id="intro6",
                children="A better understanding of online discussion on these feeds allows us to learn more about how this group collectivizes online to warrant being distinguished as a national security threat offline, especially in the aftermath of the 2014 terrorist attacks that took place in Canada and the United States.",
            ),

        ],
    )

def generate_heatmap_data(df):
  """
  :return: create heatmaps for number of comments and scores
  """
  x = df['year'].unique().tolist()
  y = df['month1'].unique().tolist()
  listz = df['n'].tolist()
  z = np.reshape(listz,(13,12)).T
  heatmap_info = go.Heatmap(z=z,x=x,y=y)
  return heatmap_info

fig1 = go.Figure(data=go.Heatmap(generate_heatmap_data(con_df)))
fig1['layout']['yaxis']['autorange'] = "reversed"
fig1.update_layout(title='Controversial Posts by Month',template='plotly_dark')

## set index for ts plot df
df2 = df1.set_index(['date'])

# subset for setting ts series
trp_df1 = df2[(df2['subreddit ']=='TheRedPill') & (df2['attribute']=='comms_num')]
trp_df2 = df2[(df2['subreddit ']=='TheRedPill') & (df2['attribute']=='score')]

mgtow_df1 = df2[(df2['subreddit ']=='MGTOW') & (df2['attribute']=='comms_num')]
mgtow_df2 = df2[(df2['subreddit ']=='MGTOW') & (df2['attribute']=='score')]

mr_df1 = df2[(df2['subreddit ']=='MensRights') & (df2['attribute']=='comms_num')]
mr_df2 = df2[(df2['subreddit ']=='MensRights') & (df2['attribute']=='score')]

def generate_ts_series(df):
  """
  :return: create static time series subplots
  """
  ts_series = df.loc[:,('n')]
  ts_series = go.Scatter(x=ts_series.index, y=ts_series.values)
  return ts_series

fig2 = make_subplots(rows=3, cols=1,
                    subplot_titles=("r/TheRedPill","r/MGTOW","r/MensRights"),
                    vertical_spacing=0.12)

fig2.append_trace(go.Scatter(
    generate_ts_series(trp_df1),
    name= '# Comments',
    legendgroup="a",
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#b613cf'}
), row=1, col=1)

fig2.append_trace(go.Scatter(
    generate_ts_series(trp_df2),
    name= 'Score',
    legendgroup="b",
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#E16462'}
), row=1, col=1)

fig2.append_trace(go.Scatter(
    generate_ts_series(mgtow_df1),
    name= '# Comments',
    legendgroup="a",
    showlegend = False,
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#b613cf'}
), row=2, col=1)

fig2.append_trace(go.Scatter(
    generate_ts_series(mgtow_df2),
    name= 'Score',
    legendgroup="b",
    showlegend = False,
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#E16462'}
), row=2, col=1)

fig2.append_trace(go.Scatter(
    generate_ts_series(mr_df1),
    name= '# Comments',
    legendgroup="a",
    showlegend = False,
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#b613cf'}
), row=3, col=1)

fig2.append_trace(go.Scatter(
    generate_ts_series(mr_df2),
    name= 'Score',
    legendgroup="b",
    showlegend = False,
    mode = 'lines',
    marker = {'symbol':'circle', 'color':'#E16462'}
), row=3, col=1)

fig2.update_layout(title='Activity on Mens Rights Activist Subreddits',template='plotly_dark')

# figure 3
#def make_pies(df):
#    labels = ['Topic 0','Topic 1','Topic 2', 'Topic 3', 'Topic 4']
#    values = df['Freq'].tolist()
#    pie_data=[go.Pie(labels=labels,values=values,hole=.3)]
#    return pie_data

labels = ['Male Victimization + Self-Loathing','Sexual Assault + Vilification of Female Sexuality','Self-Help Resources + Online Discussion', 'Tips on Navigating Life as a *Beta*', 'Role of Feminism in Society + Policy']
specs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]
colors = ['#0D0887','#7E03A8','#CC4678','#F89441','#F0F921']

fig3 = make_subplots(rows=2, cols=2,specs=specs,subplot_titles=("r/TheRedPill","r/MGTOW","r/MensRights","Controversial Posts"))

fig3.add_trace(go.Pie(
    labels=labels,
    values=[62,26,62,34,116]
    ), row=1, col=1)

fig3.add_trace(go.Pie(
    labels=labels,
    values=[90,39,46,32,93]
    ), row=1, col=2)

fig3.add_trace(go.Pie(
    labels=labels,
    values=[18,15,18,14,35]
    ), row=2, col=1)

fig3.add_trace(go.Pie(
    labels=labels,
    values=[53,26,42,34,92]
    ), row=2, col=2)

fig3.update_traces(hole=.35,textfont_size=12,marker=dict(colors=colors),textposition='outside')

fig3.update_layout(title='Topics of Discussion',template='plotly_dark')


app.layout = html.Div(
    id="app-container",
    children=[
        # Left column
        html.Div(
            id="left-column",
            className="four columns",
            children=[description_card()]
            + [
                html.Div(
                    ["initial child"], id="output-clientside", style={"display": "none"}
                )
            ],
        ),
        # Right column
        html.Div(
            id="right-column",
            className="eight columns",
            children=[
                # Post Frequency Heatmap
                html.Div([
                    dcc.Graph(figure=fig2)
                ]),
                # Static time series plots by subreddit
                html.Div([
                    dcc.Graph(figure=fig1)
                ]),
                # Pie charts
                html.Div([
                    dcc.Graph(figure=fig3)
                ]),
            ],
        ),
    ],
)

# Run the server
if __name__ == "__main__":
    app.run_server(debug=True)
